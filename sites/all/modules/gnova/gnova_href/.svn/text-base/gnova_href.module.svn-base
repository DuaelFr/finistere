<?php 
/**
 * Implementation of hook_menu().
 */
function gnova_href_menu() {
  $items = array();

  $items['admin/settings/gnova/href'] = array(
    'title' => 'Hierarchical content',
    'description' => 'Configure hierarchical content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gn_href_settings_form'),
    'access arguments' => array('administer '),
  );

  $items['admin/settings/gnova/href/display'] = array(
    'title' => 'Display',
    'description' => 'Configure hierarchical content display',
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('gn_href_settings_form'),
    'access arguments' => array('administer'),
  );

  $items['admin/settings/gnova/href/breadcrumb'] = array(
    'title' => 'Breadcrumb',
    'description' => 'Configure hierarchical content breadcrumb',
    'page callback' => 'drupal_get_form',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('gn_href_breadcrumb_settings_form'),
    'access arguments' => array('administer'),
  );
  
  if(module_exists('domain')){
  	$items['admin/settings/gnova/href/domain'] = array(
	    'title' => 'Domain settings',
	    'description' => 'Configure specific domain breadcrumb settings',
	    'page callback' => 'drupal_get_form',
	    'type' => MENU_LOCAL_TASK,
	    'page arguments' => array('gn_href_domain_settings_form'),
	    'access arguments' => array('administer'),
	  );
  }
  
  return $items;
}





/**
 * Implementation of hook_nodeapi().
 * Act on nodes defined by other modules.
 *
 * @param &$node
 *   The node the action is being performed on.
 * @param $op
 *   What kind of action is being performed.
 * @param $a3
 *   - For "view", passes in the $teaser parameter from node_view().
 *   - For "validate", passes in the $form parameter from node_validate().
 * @param $a4
 *   - For "view", passes in the $page parameter from node_view().
 * @return
 *   This varies depending on the operation.
 *   - The "presave", "insert", "update", "delete", "print" and "view"
 *     operations have no return value.
 *   - The "load" operation should return an array containing pairs
 *     of fields => values to be merged into the node object.
 */
function gnova_href_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  
  	case 'insert':
  	case 'update':
  		
  		//gestion des images de menu. Uniquement pour les contenus de type hqitem
  		if($node->type=='hqitem' && isset($node->menu_links[0]['link_parent'])){ 
  			if(preg_match('/^primary-links:[0-9]+$/', $node->menu_links[0]['link_parent']) && $node->menu_links[0]['link_enable']=='1'){ 
  				_update_imgmenu_infos($node);
  			}
  		}
  	break;
  
  	case 'delete': 
  		//Supprime l'entrée dans la table gn_href_menuimgs si elle existe
  		_delete_imgmenu_infos($node);
  		
  	break;
  
  	case 'load':
  		$conf = variable_get('gn_href_conf', array());
  		
  	break;
  
    case 'view':
		
		if($a3===FALSE)
			_hqitem_create_breadcrumb($node);
		
		
		$conf = variable_get('gn_href_conf', array());
		if(isset($conf[$node->type])){
		
			$ctConf = $conf[$node->type];
			
			//Si il s'agit d'un display page et que la vue est activée pour le display page de ce CT
			if(!$a3 && $ctConf['pageactive']){

				$afficher=TRUE;
			
				$cond = $ctConf['pagecond'];
				$condop = $ctConf['pagecondop'];
				
				//On parse les conditions d'affichage (fonction du display utililsé et fonction des critères "block-like")
				if($cond && strlen($cond)>0){
					$afficher = _gn_check_display_cond($cond, $condop);
				}else{
					$afficher=TRUE;
				}
				
				//les conditions d'affichage sont remplies
				if($afficher){
				
					//Permet, si il n'y a pas de fils, d'afficher les frères.
					$afficherVueAlternative = FALSE;
					
					//On détermine la vue à utiliser
					$viewName = $ctConf['viewname'];
					//Si la vue à utiliser a été spécifiquement déterminée dans le node
					if(isset($node->field_hq_view_name) && isset($node->field_hq_view_name[0]['value']) && strlen($node->field_hq_view_name[0]['value'])>0){
						$viewName = $node->field_hq_view_name[0]['value'];
					}else{
						//Sinon, si on est sur un domaine particulier et qu'une conf spécifique pour ce domaine est donnée
						if(module_exists('domain')){
							global $_domain;
							if(isset($_domain['domain_id']) && isset($ctConf['dom-'.$_domain['domain_id'].'_viewname'])){
								$viewName = $ctConf['dom-'.$_domain['domain_id'].'_viewname'];
							}
						}
					}
					
					//On charge la vue
					$view = views_get_view($viewName);
					//Si la vue n'existe pas, on génère une erreur.
					if($view==null){
						drupal_set_message('The view '.$ctConf['viewname'].' could not be loaded', 'error');
					}else{
						$view->set_arguments(array($node->nid));
						
						//Gestion du titre de la vue des enfants
						$listTitle=FALSE;
						if(isset($ctConf['titlefieldname'])){
							$titleFieldName = $ctConf['titlefieldname'];
							if(isset($node->$titleFieldName)){
								$titleField = $node->$titleFieldName;
								if(isset($titleField[0]['value']) && strlen(trim($titleField[0]['value']))){
									$listTitle = trim($titleField[0]['value']);
								}
							}
						}
						
						
						$displayName = 'default';
						//Si la configuration définit un display particulier
						if($ctConf['viewnamedisp'] && strlen($ctConf['viewnamedisp'])){
							$displayName = $ctConf['viewnamedisp'];
							$view->set_display($displayName);
						}
						
						$view->preview();
						
						//Si le preview donne des résultats, on exécute le display sélectionné de la vue
						if(count($view->result)>0){
							
							$vcnt= $view->execute_display();
							
							$cnt='';
							
							if($view->display[$ctConf['viewnamedisp']]->display_plugin=='block'){
								$cnt=$vcnt['content'];
							}else{
								$cnt=$vcnt;
							}
							
							if(count($view->result)>3){
								$node->href_content = theme('gnova_href-backref-scrollable', $cnt, $listTitle);
							}								
							else{
								$node->href_content = theme('gnova_href-backref', $cnt, $listTitle);
							}
							
							//On signifie au template que c'est un node possédant des fils (utile pour la partie pro)
							$node->href_content_nodeClasses = array('has-children');
							
						}
						//Sinon, si il y a une vue alternative, on l'exécute
						else{
							$afficherVueAlternative = TRUE;
						}
						
						//VUE ALTENATIVE (Node page uniquement) - Aucun résultat FILS n'a été trouvé, on tente donc d'afficher la vue alternative (les frères)
						if($afficherVueAlternative){
							
							//Gestion du titre de la vue alternative
							$listTitle=FALSE;
							if(isset($ctConf['alternatetitlefieldname'])){
								$titleFieldName = $ctConf['alternatetitlefieldname'];
								if(isset($node->$titleFieldName)){
									$titleField = $node->$titleFieldName;
									if(isset($titleField[0]['value']) && strlen(trim($titleField[0]['value']))){
										$listTitle = trim($titleField[0]['value']);
									}
								}
							}
							
							if(isset($ctConf['alternateviewname']) && isset($ctConf['alternateparentfieldname'])){
								$altView = views_get_view($ctConf['alternateviewname']);
								if($altView==null){
									drupal_set_message('The view '.$ctConf['alternateviewname'].' could not be loaded', 'error');
								} else {
									//Pour afficher la vue des frères, on a besoin du nid du parent du node courant et donc du nom du champ qui le contient.
									$fieldName = $ctConf['alternateparentfieldname'];
									if($fieldArr = $node->$fieldName){
										$nid = $fieldArr[0]['nid'];
										if(is_numeric($nid)){
											$altView->set_arguments(array($nid, $node->nid));
											$altView->preview(); 
											if(count($altView->result)>0){
												$cnt=$altView->execute_display();
												
												if(count($altView->result)>3)
													$node->href_content = theme('gnova_href-backref-scrollable', $cnt, $listTitle);
												else
													$node->href_content = theme('gnova_href-backref', $cnt, $listTitle);
													
												$node->href_content_nodeClasses = array('has-brothers');
											}
										}
									}
								}
							}
						}
					}
				}
			}
			
			//Si la vue est activée pour le teaser de ce CT
			elseif($a3 && $ctConf['teaseractive']){
			
				$listTitle = FALSE; //Pas de titre dans les display teaser.
			
				$cond = $ctConf['teasercond'];
				$condop = $ctConf['teasercondop'];
				if($cond && strlen($cond)>0){
					$afficher = _gn_check_display_cond($cond, $condop);					
				}else{
					$afficher=TRUE;
				}
				
				if($afficher){
					$view = views_get_view($ctConf['teaserviewname']);
					if($view==null){
						drupal_set_message('The view '.$ctConf['teaserviewname'].' could not be loaded', 'error');
					}else{
						$view->set_arguments(array($node->nid));
						
						$view->preview();
						
						//On n'affiche la vue que si il y a des résultats
						if(count($view->result)>0){
							
							$cnt='';
							
							if($ctConf['teaserviewnamedisp'] && strlen($ctConf['teaserviewnamedisp'])){
								
								$cnt=$view->execute_display($ctConf['teaserviewnamedisp']);
								if($view->display[$ctConf['teaserviewnamedisp']]->display_plugin=='block')
									$cnt=$cnt['content'];
										
							}else{
								$cnt=$view->execute_display();
							}
							
							$node->content['backref']['#value'] = theme('gnova_href-backref', $cnt, $listTitle);
						
						}
					}
				}
				
				if(!isset($node->links))
					$node->links = array();
					
				$node->links['readmore']=array(
					'href' => 'node/'.$node->nid,
					'title' => t('Read more'),
				);
				
			}
		}
    break;
  }
}



/**
 * Implementation of hook_theme().
 */
function gnova_href_theme($existing, $type, $theme, $path) {
  return array(
    'gnova_href-backref-scrollable' => array(
      'arguments' => array('content' => NULL, 'title' => NULL),
      'template' => 'gnova_href-backref-scrollable',
    ),
    'gnova_href-backref' => array(
      'arguments' => array('content' => NULL, 'title' => NULL),
      'template' => 'gnova_href-backref',
    ),
    'gnova_href-parent-backref' => array(
      'arguments' => array('content' => NULL, 'title' => NULL),
      'template' => 'gnova_href-parent-backref',
    ),
  );
}

function _gn_check_display_cond($cond, $condop){
	$afficher=FALSE;
	$res = drupal_eval($cond);
	if(is_bool($res) || is_numeric($res)){
		//eval returned a boolean result
		if($condop==1)
			$afficher=($res ? FALSE : TRUE);
		else
			$afficher=$res;
	}else{
		//parse args and check
		if($match = _gn_check_path_match($res)){
			if($condop==1)
				$afficher=($match ? FALSE : TRUE);
			else
				$afficher=$match;
		}
	}
	return $afficher;
}

function _gn_check_path_match($pathToCheck){

	//Code taken from block module
	$path = drupal_get_path_alias($_GET['q']);
	// Compare with the internal and path alias (if any).
	$page_match = drupal_match_path($path, $pathToCheck);
	if ($path != $_GET['q']) {
		$page_match = $page_match || drupal_match_path($_GET['q'], $pathToCheck);
	}
	
	return $page_match;
}

/**
 * Configuration settings form.
 */
function gn_href_settings_form($form_state) {
  $form = array();

  $form = system_settings_form($form);
  //dsm($form);
  $types = node_get_types();
  
  $values = variable_get('gn_href_conf', array());
  
  
  foreach($types as $name => $type){
    
  	$form['gn_href_nodetype_'.$name] = array(
  		'#type' => 'fieldset',
  		'#collapsible' => TRUE,
  		'#collapsed' => TRUE,
  		'#title' => $type->name,
  	);
	
  	/*$form['gn_href_nodetype_'.$name]['gn_href_nodetype_'.$name.'_fieldname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Field name'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['field'] : ''),
	);*/
	
	//PAGE DISPLAY
	$form['gn_href_nodetype_'.$name]['page'] = array(
		'#type' => 'fieldset',
		'#title' => t('Page display'),
	);
	
    $form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_activate']=array(
	  	'#type' => 'checkbox',
	  	'#title' => t('Activate for page display'),
	  	'#default_value' => ($values[$name]['pageactive'] ? 1 : 0),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_viewname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Page children list view name'),
	  	'#description' => t('Leave empty for using the default view or duplicate the view "gnova_href_backref_main".'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['viewname'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_titlefieldname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Page children list title fieldname'),
	  	'#description' => t('Enter the content field name that contains the children list title (if empty, no title will be displayed)'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['titlefieldname'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_viewnamedisp']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Page view display name'),
	  	'#description' => t('Leave empty for using the default display or enter another display id.'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['viewnamedisp'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_pagecond']=array(
	  	'#type' => 'textarea',
	  	'#rows' => 5,
	  	'#title' => t('Display "block like" conditions'),
	  	'#description' => t('Enter either a path or php code (must be surrounded by php tags).'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['pagecond'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['gn_href_nodetype_'.$name.'_pagecondop']=array(
	  	'#type' => 'checkbox',
	  	'#title' => t('Exclude display condition'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['pagecondop'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['page']['alternate'] = array(
		'#type' => 'fieldset',
		'#title' => t('Alternate view'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['gn_href_nodetype_'.$name]['page']['alternate']['gn_href_nodetype_'.$name.'_alternateviewname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Page alternate view name'),
	  	'#description' => t('This view will be loaded if the page view have no result. (This view must have two arguments : first, the parent nid, second the current node nid to exclude)'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['alternateviewname'] : ''),
	);
	$form['gn_href_nodetype_'.$name]['page']['alternate']['gn_href_nodetype_'.$name.'_alternateparentfieldname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Parent field name'),
	  	'#description' => t('Enter the field name that contains the parent reference (its value will be sent as an argument to the given view).'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['alternateparentfieldname'] : ''),
	);
	$form['gn_href_nodetype_'.$name]['page']['alternate']['gn_href_nodetype_'.$name.'_alternatetitlefieldname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Content field name for the list title'),
	  	'#description' => t('In order to give a per content title, please enter the field that contains this in the  currently displaied node.'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['alternatetitlefieldname'] : ''),
	);
	
	//Sélection de la vue en fonction du domaine
	if(module_exists('domain')){
		
		$form['gn_href_nodetype_'.$name]['page']['domain'] = array(
			'#type' => 'fieldset',
			'#title' => t('Domain settings'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		$domains = domain_domains();
		
		foreach($domains as $dom){
			if($dom['domain_id']>0){
				$form['gn_href_nodetype_'.$name]['page']['domain']['type-'.$name.'_domain-'.$dom['domain_id'].'_view-name'] = array(
					'#type' => 'textfield',
				  	'#title' => t('Page children list view name for '.$dom['sitename']),
				  	'#description' => t('Leave empty for using the general settings view or duplicate the view "gnova_href_backref_main".'),
				  	'#default_value' => (isset($values[$name]) ? $values[$name]['dom-'.$dom['domain_id'].'_viewname'] : ''),
				);
			}			
		}
	}
	
	
	//TEASER
	$form['gn_href_nodetype_'.$name]['teaser'] = array(
		'#type' => 'fieldset',
		'#title' => t('Teaser display'),
	);
	$form['gn_href_nodetype_'.$name]['teaser']['gn_href_nodetype_'.$name.'_teaseractivate']=array(
	  	'#type' => 'checkbox',
	  	'#title' => t('Activate for teaser display'),
	  	'#default_value' => ($values[$name]['teaseractive'] ? 1 : 0),
	);
	
	$form['gn_href_nodetype_'.$name]['teaser']['gn_href_nodetype_'.$name.'_teaserviewname']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Teaser view name'),
	  	'#description' => t('Leave empty for using the default view or duplicate the view "gnova_href_backref_main".'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['teaserviewname'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['teaser']['gn_href_nodetype_'.$name.'_teaserviewnamedisp']=array(
	  	'#type' => 'textfield',
	  	'#title' => t('Teaser view display name'),
	  	'#description' => t('Leave empty for using the default display or enter another display id.'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['teaserviewnamedisp'] : ''),
	);
	
	
	$form['gn_href_nodetype_'.$name]['teaser']['conditions']['gn_href_nodetype_'.$name.'_teasercond']=array(
	  	'#type' => 'textarea',
	  	'#rows' => 5,
	  	'#title' => t('Display "block like" conditions'),
	  	'#description' => t('Enter either a path or php code (must be surrounded by php tags).'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['teasercond'] : ''),
	);
	
	$form['gn_href_nodetype_'.$name]['teaser']['gn_href_nodetype_'.$name.'_teasercondop']=array(
	  	'#type' => 'checkbox',
	  	'#title' => t('Exclude display condition'),
	  	'#default_value' => (isset($values[$name]) ? $values[$name]['teasercondop'] : ''),
	);
  }
  
  $form['#submit'] = array('gn_href_settings_form_submit');
  return $form;
}

function gn_href_settings_form_submit($form_id, &$form_state){
	$types = node_get_types();
	$vals = $form_state['values'];
	$conf = variable_get('gn_href_conf', array());
	
	foreach($types as $name => $type){
		
		/*if((isset($vals['gn_href_nodetype_'.$name.'_activate']) && $vals['gn_href_nodetype_'.$name.'_activate']==1)
			|| (isset($vals['gn_href_nodetype_'.$name.'_teaseractivate']) && $vals['gn_href_nodetype_'.$name.'_teaseractivate']==1)){*/
			
			//$conf[$name]=array();
		
			if(isset($vals['gn_href_nodetype_'.$name.'_activate']) && $vals['gn_href_nodetype_'.$name.'_activate']==1){
				$conf[$name]['pageactive']=$vals['gn_href_nodetype_'.$name.'_activate'];
				$conf[$name]['pagecondop']=$vals['gn_href_nodetype_'.$name.'_pagecondop'];
				
				$viewName = $vals['gn_href_nodetype_'.$name.'_viewname'];
				if($viewName){
					$conf[$name]['viewname']=$viewName;
				}
				$viewName = $vals['gn_href_nodetype_'.$name.'_viewnamedisp'];
				if($viewName){
					$conf[$name]['viewnamedisp']=$viewName;
				}
				$pageCond = $vals['gn_href_nodetype_'.$name.'_pagecond'];
				if($pageCond){
					$conf[$name]['pagecond']=$pageCond;
				}
				
				//Enregistrement des paramètres spécifiques à à chaque domaine.
				if(module_exists('domain')){
					$domains = domain_domains();
		
					foreach($domains as $dom){
						
						$viewName = $vals['type-'.$name.'_domain-'.$dom['domain_id'].'_view-name'];
						if($viewName){
							$conf[$name]['dom-'.$dom['domain_id'].'_viewname']=$viewName;
						}else{
							unset($conf[$name]['dom-'.$dom['domain_id'].'_viewname']);
						}
					}
					
				}
				$titleFieldName = $vals['gn_href_nodetype_'.$name.'_titlefieldname'];
				if($titleFieldName && strlen(trim($titleFieldName))>0){
					$conf[$name]['titlefieldname'] = trim($titleFieldName);
				}
				
				$altViewName = $vals['gn_href_nodetype_'.$name.'_alternateviewname'];
				if($altViewName && strlen(trim($altViewName))>0){
					$conf[$name]['alternateviewname'] = trim($altViewName);
				}
				$altParentFieldName = $vals['gn_href_nodetype_'.$name.'_alternateparentfieldname'];
				if($altParentFieldName && strlen(trim($altParentFieldName))>0){
					$conf[$name]['alternateparentfieldname'] = trim($altParentFieldName);
				}
				$altTitleFieldName = $vals['gn_href_nodetype_'.$name.'_alternatetitlefieldname'];
				if($altTitleFieldName && strlen(trim($altTitleFieldName))>0){
					$conf[$name]['alternatetitlefieldname'] = trim($altTitleFieldName);
				}
				
				
			}
			else{
				unset($conf[$name]['alternatetitlefieldname']);
				unset($conf[$name]['alternateparentfieldname']);
				unset($conf[$name]['titlefieldname']);
				unset($conf[$name]['pagecond']);
				unset($conf[$name]['viewnamedisp']);
				unset($conf[$name]['viewname']);
				unset($conf[$name]['pagecondop']);
				unset($conf[$name]['pageactive']);
				if(module_exists('domain')){
					$domains = domain_domains();
					foreach($domains as $dom){
						unset($conf[$name]['dom-'.$dom['domain_id'].'_viewname']);
					}
				}
			}
			
			if(isset($vals['gn_href_nodetype_'.$name.'_teaseractivate']) && $vals['gn_href_nodetype_'.$name.'_teaseractivate']==1){
				
				$conf[$name]['teaseractive']=$vals['gn_href_nodetype_'.$name.'_teaseractivate'];
				$conf[$name]['teasercondop']=$vals['gn_href_nodetype_'.$name.'_teasercondop'];
				
				$viewName = $vals['gn_href_nodetype_'.$name.'_teaserviewname'];
				if($viewName){
					$conf[$name]['teaserviewname']=$viewName;
				}
				$viewName = $vals['gn_href_nodetype_'.$name.'_teaserviewnamedisp'];
				if($viewName){
					$conf[$name]['teaserviewnamedisp']=$viewName;
				}
				$viewName = $vals['gn_href_nodetype_'.$name.'_teasercond'];
				if($viewName){
					$conf[$name]['teasercond']=$viewName;
				}
			}
			else{
				unset($conf[$name]['teasercond']);
				unset($conf[$name]['teaserviewnamedisp']);
				unset($conf[$name]['teaserviewname']);
				unset($conf[$name]['teasercondop']);
				unset($conf[$name]['teaseractive']);
			}
		//}
		
		if(!isset($conf[$name]) || count($conf[$name])<=0){
			unset($conf[$name]);
		}
		
	}//Fin foreach
	
	if(count($conf)>0){
		variable_set('gn_href_conf', $conf);
	}else{
		variable_del('gn_href_conf');
	}
}


/* GESTION DU BREADCRUMB */
/*
* 
*/
function gn_href_breadcrumb_settings_form($form_state) {
	$form = array();

  	$form = system_settings_form($form);
  	
  	$values = variable_get('gn_href_conf', array());
  
  	$types = node_get_types();
  
	foreach($types as $name => $type){
		$form['gn_href_nodetype_'.$name] = array(
	  		'#type' => 'fieldset',
	  		'#collapsible' => TRUE,
	  		'#collapsed' => TRUE,
	  		'#title' => $type->name,
	  	);
	  	
	  	$form['gn_href_nodetype_'.$name]['type_'.$name.'_activate'] = array(
	  		'#type' => 'checkbox',
	  		'#title' => t('Activate'),
	  		'#default_value' => ($values[$name]['breadcrumb']['activate'] ? 1 : 0),
	  	);
	  	
	  	$form['gn_href_nodetype_'.$name]['type_'.$name.'_parent_field_name'] = array(
	  		'#type' => 'textfield',
	  		'#title' => t('Parent noderef field name'),
	  		'#default_value' => ($values[$name]['breadcrumb']['parent_field_name'] ? $values[$name]['breadcrumb']['parent_field_name'] : ''),
	  	);
	  	module_load_include('inc', 'token', 'token.pages');
	  	$form['gn_href_nodetype_'.$name]['type_'.$name.'_token_prev'] = array(
	  		'#type' => 'textfield',
	  		'#title' => t('Parent noderef field name'),
	  		'#default_value' => ($values[$name]['breadcrumb']['token_prev'] ? $values[$name]['breadcrumb']['token_prev'] : ''),
	  		
	  	);
	}
	$form['infos'] = array(
		'#type' => 'fieldset',
		'#title' => t('Available tokens'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['infos']['tokens'] = array(
		'#value' => theme_token_help('node'),
	);
	
	$form['#submit'] = array('gn_href_breadcrumb_settings_form_submit');
	
	return $form;
}

/*
* 
*/
function gn_href_breadcrumb_settings_form_submit($form_id, &$form_state){
	$types = node_get_types();
	$vals = $form_state['values'];
	$conf = array();
	
	$savedVals = variable_get('gn_href_conf', array());
	
	foreach($types as $name => $type){
		
		if(isset($vals['type_'.$name.'_activate']) && $vals['type_'.$name.'_activate']==1 && 
			isset($vals['type_'.$name.'_parent_field_name']) && strlen(trim($vals['type_'.$name.'_parent_field_name']))>0) {
			
			$savedVals[$name]['breadcrumb']['activate']=1;
			$savedVals[$name]['breadcrumb']['parent_field_name']=trim($vals['type_'.$name.'_parent_field_name']);
			
			if(isset($vals['type_'.$name.'_token_prev']) && strlen(trim($vals['type_'.$name.'_token_prev']))>0){
				$savedVals[$name]['breadcrumb']['token_prev'] = trim($vals['type_'.$name.'_token_prev']);
			}
			else{
				unset($savedVals[$name]['breadcrumb']['token_prev']);
			}
			
		}
		else {
			if(isset($savedVals[$name]['breadcrumb'])){
				unset($savedVals[$name]['breadcrumb']);
			}
		}
	}
	
	variable_set('gn_href_conf', $savedVals);
}


//---------------------- GESTION DES VOCABULAIRES EN FONCTION DES DOMAINES ID --------------------
function gn_href_domain_settings_form($form_state) {
	

	$form = array();

  	$form = system_settings_form($form);
  	
  	$values = variable_get('gn_href_conf', array());
  	
  	if(module_exists('domain')){
  		
  		$types = node_get_types();
		
  		$domains = domain_domains();
  		
  		foreach($types as $name => $type){
  		
  			$vocs = taxonomy_get_vocabularies($name);
  			
  			if(count($vocs)>0){
  				$form['gn_href_nodetype_'.$name] = array(
			  		'#type' => 'fieldset',
			  		'#collapsible' => TRUE,
			  		'#collapsed' => TRUE,
			  		'#title' => $type->name,
			  	);
	  		
		  		foreach($domains as $domain){
		  			$domid=$domain['domain_id'];
		  			$form['gn_href_nodetype_'.$name]['type-'.$name.'_domain-'.$domid]=array(
		  				'#type' => 'select',
		  				'#title' => $domain['sitename'],
		  				'#options' => array(0=>'-None-'),
		  				'#default_value' => ($values[$name]['breadcrumb']['domain_'.$domid]['hqvid'] ? $values[$name]['breadcrumb']['domain_'.$domid]['hqvid'] : 0),
		  			);
		  			foreach($vocs as $voc){
		  				$form['gn_href_nodetype_'.$name]['type-'.$name.'_domain-'.$domid]['#options'][$voc->vid]=$voc->name;
		  			}
		  		}
  			}
  		}
  	}
  	$form['#submit'] = array('gn_href_domain_settings_form_submit');
	
	return $form;
}

function gn_href_domain_settings_form_submit($form_id, &$form_state){
	$types = node_get_types();
	$domains = domain_domains();
	$vals = $form_state['values'];
	$conf = array();
	
	$savedVals = variable_get('gn_href_conf', array());
	
	foreach($types as $name => $type){
		foreach($domains as $domain){
			
			$domid = $domain['domain_id'];
			
			$voc = $vals['type-'.$name.'_domain-'.$domid];
			if($voc>0){
				
				$savedVals[$name]['breadcrumb']['domain_'.$domid]['hqvid'] = $voc;
				
			}elseif(isset($savedVals[$name]['breadcrumb']['domain_'.$domid]['hqvid'])){
			
				unset($savedVals[$name]['breadcrumb']['domain_'.$domid]);
			
			}
		}
	}
	variable_set('gn_href_conf', $savedVals);
}


/**
 * Implementation of hook_token_list
 */
function gnova_href_token_list($type='all'){
	$tokens = array();
	
	if (($type=='all' || $type == 'node' )&& module_exists('domain')) {
    	$tokens['node']['domain-hq-term'] = t("The main term for the current domain. Each hq content should be organized in two different vocabs one by domain.");
    }
    
    return $tokens;
}
/**
 * Implementation of hook_token_values
 */
function gnova_href_token_values($type, $object = NULL, $options = array()) {
	$values = array();
	
	if($type=='node' && module_exists('domain')){
		
		$conf = variable_get('gn_href_conf', array());
		
		$node_type_name = $object->type;
		
		global $_domain;
		$domid = $_domain['domain_id'];
		
		//Si la gestion du terme de taxo est configurée
		if(isset($conf[$node_type_name]['breadcrumb']['domain_'.$domid])){
		
			$vid = $conf[$node_type_name]['breadcrumb']['domain_'.$domid]['hqvid'];
			
			$keys = array_keys($object->taxonomy);
			$encore = TRUE;
			//Pour chaque terme de taxo du node on récupère le premier terme et on renseigne le token avec "tid;;term-name"
			for($i=0; $i<count($keys) && $encore; $i++){
			
				
				$term = $object->taxonomy[$keys[$i]];
				
				if($term->vid==$vid){
					
					$values['domain-hq-term'] = $term->tid.';;'.$term->name;
					
					$encore=FALSE;
				}
			}
		}else{
			
			$values['domain-hq-term'] = '';
			
		}
		
	}
	
	return $values;
}


/*
* 
*/
function _hqitem_create_breadcrumb($node){
	//On récupère la conf
	$conf = variable_get('gn_href_conf', array());
	
	//Si la gestion des breadCrumb hiérarchiques est activée pour le CT de $node
	if(isset($conf[$node->type]['breadcrumb'])){
		
		$links[]=l(t('Home'), '');
		
		//Gestion du token de début (relatif à la taxonomie)
		if(isset($conf[$node->type]['breadcrumb']['token_prev'])){
			$term = array();
		
			$term_name = token_replace($conf[$node->type]['breadcrumb']['token_prev'], 'node', $node);
			
			$pattern = '/^[a-zA-Z0-9._-ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ\s]+(;;)[a-zA-Z0-9._-ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ\s]+$/';
			if(preg_match($pattern, $term_name)){
				
				$parts = split(';;', $term_name);
				$terms[] = taxonomy_get_term(intval($parts[0]));
				
			}
			else{
				$terms = _gn_href_get_terms_by_name($term_name);
			}
			
			if(count($terms)>0 && module_exists('i18ntaxonomy')){
				$cat = i18ntaxonomy_translate_term_name($terms[0]);
			}
			
			if(module_exists('pathauto')){
			
				module_load_include('inc', 'pathauto', 'pathauto');
				$clean_path = pathauto_cleanstring($terms[0]->name);
				$links[] = l($cat, $clean_path);
			
			}
			
		}
		
		$fieldName = $conf[$node->type]['breadcrumb']['parent_field_name'];
		
		//Vérifier le type de champ (nodereference + multiple ou pas)
		module_load_include('inc', 'content', 'includes/content.crud');
		$fieldInstanceInfo = content_field_instance_read(array('type_name'=>$node->type, 'field_name'=>$fieldName));
		
		$parent_links = array();
		//Si le field existe bien pour ce type de contenu
		if(count($fieldInstanceInfo)>0){
			
			$multiVal = ($fieldInstanceInfo[0]['multiple']=='1' ? TRUE : FALSE);
			$nodeRefCheck = ($fieldInstanceInfo[0]['type']=='nodereference' ? TRUE : FALSE);
			
			$tree = array();
			
			//Si le field est bien de type "nodereference"
			if($nodeRefCheck){
				
				//Si l'instance du champ est à valeurs multiples, alors le traietement doit prendre en compte une table externe
				if($multiVal){
					_recursive_parent_multiple_call($tree, $node->nid, 'content_'.$fieldName, $fieldName.'_nid');
				}
				//Sinon, la valeur du parent est directement dans le champ "content_[nomDuChamp]" de la table "content_[CTName]"
				else{
					_recursive_parent_single_call($tree, $node->nid, 'content_type_'.$node->type, $fieldName.'_nid');
				}
				
				$parent_links = _create_breadcrumb_item($tree);
				
			}
		}
		
		$links = array_merge($links, $parent_links);
		
		drupal_set_breadcrumb($links);
		
	}
}

function _gn_href_get_terms_by_name($term_name, $vid=FALSE){
	if($vid && is_numeric($vid))
		$q = db_query("SELECT * FROM {term_data} WHERE name LIKE '%s' AND vid=%i", $term_name, $vid);
	else
		$q = db_query("SELECT * FROM {term_data} WHERE name LIKE '%s'", $term_name);
	$res = array();
	while($term = db_fetch_object($q)){
		$res[]=$term;
	}
	return $res;
}

/*
* 
*/
function _create_breadcrumb_item($nidsOrderedList){
	$links = array();
	foreach($nidsOrderedList as $nid){
		$res = db_fetch_array(db_query("SELECT title FROM {node} WHERE nid=%d", $nid));
		if($res['title'])
			$links[]=l($res['title'], 'node/'.$nid);
	}
	return $links;
}

/*
* 
*/
function _recursive_parent_multiple_call(&$parents, $nidFils, $tableName, $fieldName){
	$q = db_query("SELECT %s FROM {%s} WHERE nid=%d ORDER BY delta ASC LIMIT 1", $fieldName, $tableName, $nidFils);
	$res = db_fetch_array($q);
	if($res[$fieldName]){
		_recursive_parent_multiple_call($parents, $res[$fieldName], $tableName, $fieldName);
	}
	$parents[] = $nidFils;
	return $parentList;
}

/*
* 
*/
function _recursive_parent_single_call(&$parents, $nidFils, $tableName, $fieldName){
	$q = db_query("SELECT %s FROM {%s} WHERE nid=%d", $fieldName, $tableName, $nidFils);
	$res = db_fetch_array($q);
	if($res[$fieldName]){
		_recursive_parent_single_call($parents, $res[$fieldName], $tableName, $fieldName);
	}
	$parents[] = $nidFils;
	return $parentList;
}

/**
 * Fonction privée permettant de gérer les images de menu. Ne fonctionne que si un champ nommé field_hqitem_menuimg
 * est présent dans le node.
 */
function _update_imgmenu_infos($node){
	
	/*if($item['menu_name']=='primary-links' 
		&& preg_match('/^node\/[0-9]+$/', $item['link_path'])){
		
		$nid = intval(substr($item['link_path'], 5));
		
		if($node = node_load($nid)){*/
		
		$node_path = 'node/'.$node->nid;
		
		if(is_object($node)){ 
			if(isset($node->field_hqitem_menuimg) && count($node->field_hqitem_menuimg)>0 && isset($node->field_hqitem_menuimg[0])){
				$imgs = array();
				
				for($i=0; $i<count($node->field_hqitem_menuimg);$i++){
					$file = $node->field_hqitem_menuimg[$i];
					$imgs[]=$file['fid'];
				}
				
				$ser = serialize($imgs);
				
				$res = db_fetch_array(db_query("SELECT * FROM {gn_href_menuimgs} WHERE path LIKE '%s'", $node_path));
				if($res){
					db_query("UPDATE {gn_href_menuimgs} SET imgs = '%s' WHERE path='%s'", $ser, $node_path);
				}else{
					db_query("INSERT INTO {gn_href_menuimgs}  (path, imgs) VALUES ('%s', '%s')", $node_path, $ser);
				}
				return ;
			}
			_delete_imgmenu_infos($node);
		}
		
	//}
}

function _delete_imgmenu_infos($node){
	$node_path = 'node/'.$node->nid;
	//Si rien n'est à faire, on s'assure qu'aucune entrée ne correspond au node dans la table.
	$res = db_fetch_array(db_query("SELECT * FROM {gn_href_menuimgs} WHERE path LIKE '%s'", $node_path));
	if($res){
		db_query("DELETE FROM {gn_href_menuimgs} WHERE path='%s'", $node_path);
	}
}

function format_menu_link_imglist($link){
	$path = $link['link_path'];
	$res = db_fetch_array(db_query("SELECT * FROM {gn_href_menuimgs} WHERE path LIKE '%s'", $link['link_path']));
	if($res){
		
		
		$img_fids = unserialize($res['imgs']);
		
		if(count($img_fids)>0){
		
			$html = '';
			
			$items_html = '';
			for($i=0; $i < count($img_fids); $i++){
				$fid = $img_fids[$i];
				$file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid=%d", $fid));
				//On valide que le fichier est bien une image (la fonction renvoie un tableau d'erreurs s'il y en a)
				if(count(file_validate_is_image($file))<=0){
					//$classes = ;
					$items_html.='<li'.($i==count($img_fids)-1 ? ' class="last" ' : '').'>'.theme('imagecache', 'hqitem_menu_image', $file->filepath).'</li>';
				}
			}
			
			if(strlen($items_html)>0){
				$html = '<ul class="ssmenu_img">'.$items_html.'</ul><div style="clear:right"></div>';
				return $html;
			}
			
		}//Fin if(count($img_fids)...
		
	}
	return FALSE;
}