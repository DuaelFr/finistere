<?php

/**
 * Implementation of hook_menu().
 */
function views_taxo_childrenoptions_menu() {
  $items = array();

  $items['childrenoptions/taxonomy/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'childrenoptions_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function views_taxo_childrenoptions_views_api() {
	return array(
		'api' => 2,
		'path' => drupal_get_path('module', 'views_taxo_childrenoptions') . '/includes',
	);
}

/**
 * Helper function for autocompletion
 */
function childrenoptions_taxonomy_autocomplete($parent, $string = '') {
	
	// The user enters a comma-separated list of tags. We only autocomplete the last tag.
	$array = drupal_explode_tags($string);
	$matches = array();
	// Fetch last tag
	$last_string = trim(array_pop($array));
	
		
	if ($last_string != '') {
		$result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t LEFT JOIN {term_hierarchy} th ON t.tid=th.tid WHERE th.parent = %d AND t.name LIKE '%%%s%%'", 't', 'tid'), $parent, $last_string, 0, 10);
		
		$prefix = count($array) ? implode(', ', $array) .', ' : '';
		
		while ($tag = db_fetch_object($result)) {
			$n = $tag->name;
			// Commas and quotes in terms are special cases, so encode 'em.
			if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
				$n = '"'. str_replace('"', '""', $tag->name) .'"';
			}
			$matches[$prefix . $n] = check_plain($tag->name);
		}
	}
	
	
	
	drupal_json($matches);
}

function views_taxo_childrenoptions_form_alter(&$form, &$form_state, $form_id){
	
	/*if($form_id=='views_exposed_form'){
		if(isset($form['markup'])){
			$keys = array_keys($form);
			$subfields=array();
			$start=FALSE;
			$nbgroups = 0;
			$weight=0;
			//unset($form['#info']);
			foreach($keys as $key){
				if(substr($key, 0, 1)!='#'){
					if(substr($key, 0, 6)=='markup' && substr($form[$key]['#value'], 0, 7)=='start;;'){
						if(strlen($form[$key]['#value'])>7)
							$str = substr($form[$key]['#value'], 7, strlen($form[$key]['#value']));
						else
							$str='';
						$form['group_'.$nbgroups] = array(
							'#type' => 'fieldset',
							'#title' => $str,
							'#weight' => $weight,
						);
						unset($form[$key]);
						unset($form['#info'][$key]);
						$start = TRUE;
					}elseif(substr($key, 0, 6)=='markup' && $start){
						$length =strlen($form[$key]['#value'])-5;
						$str = substr($form[$key]['#value'], $length, 5);
						if($str==';;end'){
							$start=FALSE;
							$nbgroups++;
							unset($form[$key]);
							unset($form['#info'][$key]);
						}
					}elseif($start){
						$form['group_'.$nbgroups][$key]=$form[$key];
						$form['group_'.$nbgroups][$key]['#title']=$form['#info'][$key]['label'];
						unset($form['#info'][$key]);
						
					}else{
						$form[$key]['#weight']=$weight;
					}
					$weight++;	
				}
			}
		}
	}*/
	
}

function views_taxo_childrenoptions_preprocess_views_exposed_form(&$vars) { 
	
	$form = &$vars['form']; 
	
	/*foreach ($form['#info'] as $id => $info) {
		 if (isset($form[$info['value']]['#type']) && $form[$info['value']]['#type']=='ordercheckbox') {
		 	$form[$info['value']]['#type']='checkbox';
		 	$form[$info['value']]['#title'] = $info['label'];
		 	unset($form[$info['value']]['#printed']);// = TRUE;
		 	$checkbox = drupal_render($form[$info['value']]);
		 	$widget = new stdClass;
		    // set up defaults so that there's always something there.
		    $widget->label = $widget->operator = $widget->widget = NULL;
		    $widget->widget = $checkbox;
		    $vars['ordercheckboxes'][$id] = $widget;
		 	unset($form[$info['value']]);
		 	unset($vars['widgets'][$id]);
      		continue;
		 }
	}*/
	
	// Split the widgets into standard and advanced widgets
	foreach ($vars['widgets'] as $id=>$widget) {
	
		if (preg_match('/edit-advanced/', $widget->id)) {
			$vars['advanced_widgets'][$id] = $widget;
			unset($vars['widgets'][$id]);
			
			// Adding fieldset in the template required us to add the javascript specifically
			drupal_add_js('misc/collapse.js');
		}
		if (preg_match('/checkboxes/', $id)) {
			$vars['ordercheckboxes'][$id] = $widget;
			unset($vars['widgets'][$id]);
		}
	}
}